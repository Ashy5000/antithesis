commit 802952df3560fc3591ad9f40da83141452eb88e7
Author: Ashy5000 <ashydashy5000@gmail.com>
Date:   Sat Aug 23 15:15:44 2025 -0700

    Implements DMA

diff --git a/drivers/gpu/drm/antithesis/antithesis.c b/drivers/gpu/drm/antithesis/antithesis.c
index 304cad893..cc0e2aa29 100644
--- a/drivers/gpu/drm/antithesis/antithesis.c
+++ b/drivers/gpu/drm/antithesis/antithesis.c
@@ -54,7 +54,7 @@ static const struct pci_device_id pci_table[] = {
 
 struct antithesis_state state;
 
-char *kret;
+unsigned int *kret;
 
 static ssize_t antithesis_write(struct file *filp, const char __user *buf,
 				size_t len, loff_t *off)
@@ -69,8 +69,7 @@ static ssize_t antithesis_write(struct file *filp, const char __user *buf,
 		unsigned int size = *((unsigned int *)(kbuf +
 				      ANTITHESIS_FILE_OFFSET_ALLOC_SIZE));
 		struct antithesis_alloc_obj *alloced_obj = antithesis_alloc_obj_alloc(state.alloc_dev, size);
-		kret = kmalloc(sizeof(unsigned int), GFP_KERNEL);
-		*((unsigned int*)kret) = alloced_obj - state.alloc_dev->objs;
+		*kret = alloced_obj - state.alloc_dev->objs;
 		return len;
 	case ANTITHESIS_FILE_PREFIX_WRITE:; // WHY?!?!?!
 		unsigned int id = *((unsigned int *)(kbuf +
@@ -80,6 +79,7 @@ static ssize_t antithesis_write(struct file *filp, const char __user *buf,
 		antithesis_command_process(
 			antithesis_command_queue_pop(state.alloc_dev->queue),
 			state.alloc_dev->pdev);
+
 		return len;
 	case ANTITHESIS_FILE_PREFIX_OUTPUT:; // CLANG CAN DIE; LONG LIVE GCC!!!!!!
 		unsigned int out_id = *((unsigned int *)(kbuf +
@@ -104,7 +104,7 @@ static ssize_t antithesis_write(struct file *filp, const char __user *buf,
 		antithesis_command_process(
 			antithesis_command_queue_pop(state.alloc_dev->queue),
 			state.alloc_dev->pdev);
-		kret = kmalloc(sizeof(unsigned int), GFP_KERNEL);
+
 		return len;
 	default:
 		return 0;
@@ -113,10 +113,10 @@ static ssize_t antithesis_write(struct file *filp, const char __user *buf,
 }
 
 static ssize_t antithesis_read (struct file *filp, char __user *buf, size_t len, loff_t *off) {
-	if (copy_to_user(buf, kret, len)) {
+	if (copy_to_user(buf, kret, sizeof(*kret))) {
 		return -EFAULT;
 	}
-	return 0;
+	return sizeof(*kret);
 }
 
 static struct file_operations fops = {
@@ -128,9 +128,8 @@ static struct file_operations fops = {
 static int antithesis_probe(struct pci_dev *pdev,
 			    const struct pci_device_id *ent)
 {
-	int ret = 0;
-
 	struct antithesis_pci_dev *apdev = antithesis_pci_init(pdev);
+
 	state.alloc_dev = antithesis_alloc_dev_alloc(apdev);
 
 	alloc_chrdev_region(&chardev.devno, 0, 1, DRV_NAME);
@@ -141,9 +140,11 @@ static int antithesis_probe(struct pci_dev *pdev,
 	cdev_add(&chardev.cdev, chardev.devno, 1);
 	device_create(antithesis_class, NULL, MKDEV(MAJOR(chardev.devno), 0), NULL, "antithesis");
 
+	kret = kmalloc(sizeof(*kret), GFP_KERNEL);
+
 	printk(KERN_NOTICE "Antithesis init success!");
 
-	return ret;
+	return 0;
 }
 
 static void antithesis_remove(struct pci_dev *pdev)
diff --git a/drivers/gpu/drm/antithesis/antithesis_command.c b/drivers/gpu/drm/antithesis/antithesis_command.c
index 305de39b2..b0d5c770f 100644
--- a/drivers/gpu/drm/antithesis/antithesis_command.c
+++ b/drivers/gpu/drm/antithesis/antithesis_command.c
@@ -1,45 +1,57 @@
 #include <linux/kthread.h>
+#include <linux/io-64-nonatomic-lo-hi.h>
 #include "antithesis_command.h"
 
-unsigned int antithesis_command_flags(enum antithesis_command_type type) {
+unsigned int antithesis_command_flags(enum antithesis_command_type type)
+{
 	switch (type) {
-		case ANTITHESIS_COMMAND_WRITE:
-			return ANTITHESIS_COMMAND_FLAG_EXECUTE | ANTITHESIS_COMMAND_FLAG_DATAWRITE;
-		case ANTITHESIS_COMMAND_READ:
-			return ANTITHESIS_COMMAND_FLAG_DATAREAD;
-		case ANTITHESIS_COMMAND_OUTPUT:
-			return ANTITHESIS_COMMAND_FLAG_EXECUTE;
-		default:
-			return 0;
+	case ANTITHESIS_COMMAND_WRITE:
+		return ANTITHESIS_COMMAND_FLAG_EXECUTE |
+		       ANTITHESIS_COMMAND_FLAG_DATAWRITE;
+	case ANTITHESIS_COMMAND_READ:
+		return ANTITHESIS_COMMAND_FLAG_EXECUTE |
+		       ANTITHESIS_COMMAND_FLAG_DATAREAD;
+	case ANTITHESIS_COMMAND_OUTPUT:
+		return ANTITHESIS_COMMAND_FLAG_EXECUTE;
+	default:
+		return 0;
 	}
 }
 
-void antithesis_command_queue_push(struct antithesis_command_queue *queue, struct antithesis_command *command) {
-	while (queue->commands[queue->producer_pos] != NULL) {}
+void antithesis_command_queue_push(struct antithesis_command_queue *queue,
+				   struct antithesis_command *command)
+{
+	while (queue->commands[queue->producer_pos] != NULL) {
+	}
 	queue->commands[queue->producer_pos] = command;
 	queue->producer_pos = (queue->producer_pos + 1) % queue->command_count;
 }
 
-struct antithesis_command *antithesis_command_queue_pop(struct antithesis_command_queue *queue) {
-	while (queue->commands[queue->consumer_pos] == NULL) {}
+struct antithesis_command *
+antithesis_command_queue_pop(struct antithesis_command_queue *queue)
+{
+	while (queue->commands[queue->consumer_pos] == NULL) {
+	}
 	struct antithesis_command *cmd = queue->commands[queue->consumer_pos];
 	queue->commands[queue->consumer_pos] = NULL;
 	queue->consumer_pos = (queue->consumer_pos + 1) % queue->command_count;
 	return cmd;
 }
 
-void antithesis_command_process(struct antithesis_command *cmd, struct antithesis_pci_dev *pdev) {
+void antithesis_command_process(struct antithesis_command *cmd,
+				struct antithesis_pci_dev *pdev)
+{
 	unsigned int flags = antithesis_command_flags(cmd->type);
 	iowrite8(cmd->type, pdev->pcimem + ANTITHESIS_REG_CMND);
 	for (unsigned int i = 0; i < cmd->arg_count; i++) {
-		iowrite8(cmd->args[i].val, pdev->pcimem + cmd->args[i].buf_location);
+		iowrite64_lo_hi(cmd->args[i].val,
+			  pdev->pcimem + cmd->args[i].buf_location);
 	}
 	wmb();
 	if (flags & ANTITHESIS_COMMAND_FLAG_DATAWRITE) {
-		iowrite8(cmd->buf_size, pdev->pcimem + ANTITHESIS_REG_SIZE);
-		for (unsigned int i = 0; i < cmd->buf_size; i++) {
-			iowrite8(((char*)cmd->buf)[i], pdev->pcimem + ANTITHESIS_OFFSET_DATA + i);
-		}
+		iowrite64_lo_hi(cmd->buf_size, pdev->pcimem + ANTITHESIS_REG_SIZE);
+		antithesis_pci_dma_realloc(pdev, cmd->buf_size);
+		memcpy(pdev->dma_mem, cmd->buf, cmd->buf_size);
 	}
 	wmb();
 	if (flags & ANTITHESIS_COMMAND_FLAG_EXECUTE) {
@@ -47,14 +59,19 @@ void antithesis_command_process(struct antithesis_command *cmd, struct antithesi
 	}
 	wmb();
 	if (flags & ANTITHESIS_COMMAND_FLAG_ASYNC) {
-		while (ioread8(pdev->pcimem + ANTITHESIS_REG_APLY)) {};
-	}
-	mb();
-	if (flags & ANTITHESIS_COMMAND_FLAG_DATAREAD) {
-		iowrite8(cmd->buf_size, pdev->pcimem + ANTITHESIS_REG_SIZE);
-		for (unsigned int i = 0; i < cmd->buf_size; i++) {
-			((char*)cmd->buf)[i] = ioread8(pdev->pcimem + ANTITHESIS_OFFSET_DATA + i);
-		}
+		while (ioread8(pdev->pcimem + ANTITHESIS_REG_APLY)) {
+		};
 	}
+	// mb();
+	// if (flags & ANTITHESIS_COMMAND_FLAG_DATAREAD) {
+	// 	iowrite8(cmd->buf_size, pdev->pcimem + ANTITHESIS_REG_SIZE);
+	// 	dma_addr_t dma_addr = dma_map_single(&pdev->dev->dev, cmd->buf,
+	// 					     cmd->buf_size,
+	// 					     DMA_TO_DEVICE);
+	// 	iowrite32((dma_addr >> 32) | 0xffffffff,
+	// 		  pdev->pcimem + ANTITHESIS_REG_DMA);
+	// 	iowrite32(dma_addr | 0xffffffff,
+	// 		  pdev->pcimem + ANTITHESIS_REG_DMA + 4);
+	// }
 	kfree(cmd);
 }
diff --git a/drivers/gpu/drm/antithesis/antithesis_command.h b/drivers/gpu/drm/antithesis/antithesis_command.h
index 96a999c27..aeb3d1c4b 100644
--- a/drivers/gpu/drm/antithesis/antithesis_command.h
+++ b/drivers/gpu/drm/antithesis/antithesis_command.h
@@ -15,7 +15,7 @@ unsigned int antithesis_command_flags(enum antithesis_command_type type);
 
 struct antithesis_command_arg {
 	unsigned int buf_location;
-	char val;
+	unsigned long int val;
 };
 
 struct antithesis_command {
diff --git a/drivers/gpu/drm/antithesis/antithesis_pci.c b/drivers/gpu/drm/antithesis/antithesis_pci.c
index afbd999b7..6dd622b21 100644
--- a/drivers/gpu/drm/antithesis/antithesis_pci.c
+++ b/drivers/gpu/drm/antithesis/antithesis_pci.c
@@ -1,3 +1,4 @@
+#include <linux/io-64-nonatomic-lo-hi.h>
 #include "antithesis_pci.h"
 
 #define DRV_NAME "antithesis"
@@ -19,7 +20,9 @@ struct antithesis_pci_dev *antithesis_pci_init(struct pci_dev *pdev)
 		return ERR_PTR(ret);
 	}
 
-	void __iomem *pcimem = pci_iomap(pdev, 0, 0);
+	resource_size_t pciaddr = pci_resource_start(pdev, 0);
+
+	void __iomem *pcimem = ioremap(pciaddr, 64);
 	struct antithesis_pci_dev *apdev = kmalloc(sizeof(*apdev), GFP_KERNEL);
 	apdev->pcimem = pcimem;
 	apdev->dev = pdev;
@@ -33,3 +36,17 @@ void antithesis_pci_deinit(struct antithesis_pci_dev *pdev)
 	kfree(pdev->dev);
 	kfree(pdev);
 }
+
+void antithesis_pci_dma_init(struct antithesis_pci_dev *pdev)
+{
+	dma_set_mask(&pdev->dev->dev, DMA_BIT_MASK(64));
+	pdev->dma_size = 0;
+}
+
+void antithesis_pci_dma_realloc(struct antithesis_pci_dev *pdev, unsigned long int size)
+{
+
+	pdev->dma_mem = krealloc(pdev->dma_mem, size, GFP_KERNEL);
+	dma_addr_t dma_addr = dma_map_single(&pdev->dev->dev, pdev->dma_mem, size, DMA_TO_DEVICE);
+	iowrite64_lo_hi(dma_addr, pdev->pcimem + ANTITHESIS_REG_DMA);
+}
diff --git a/drivers/gpu/drm/antithesis/antithesis_pci.h b/drivers/gpu/drm/antithesis/antithesis_pci.h
index d8802ee7c..dd470fac5 100644
--- a/drivers/gpu/drm/antithesis/antithesis_pci.h
+++ b/drivers/gpu/drm/antithesis/antithesis_pci.h
@@ -3,15 +3,20 @@
 #define ANTITHESIS_REG_CMND 0
 #define ANTITHESIS_REG_APLY 1
 #define ANTITHESIS_REG_ADDR 2
-#define ANTITHESIS_REG_SIZE 3
-#define ANTITHESIS_REG_WIDTH 4
-#define ANTITHESIS_REG_HEIGHT 5
-#define ANTITHESIS_OFFSET_DATA 6
+#define ANTITHESIS_REG_SIZE 10
+#define ANTITHESIS_REG_WIDTH 18
+#define ANTITHESIS_REG_HEIGHT 26
+#define ANTITHESIS_REG_DMA 34
 
 struct antithesis_pci_dev {
 	void __iomem *pcimem;
 	struct pci_dev *dev;
+	void *dma_mem;
+	unsigned long int dma_size;
 };
 
 struct antithesis_pci_dev *antithesis_pci_init(struct pci_dev *pdev);
 void antithesis_pci_deinit(struct antithesis_pci_dev *pdev);
+
+void antithesis_pci_dma_init(struct antithesis_pci_dev *pdev);
+void antithesis_pci_dma_realloc(struct antithesis_pci_dev *pdev, unsigned long int size);
