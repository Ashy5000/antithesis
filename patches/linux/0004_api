commit 9e47809f75debdb37e719f31da4945e7fecbfa54
Author: Ashy5000 <ashydashy5000@gmail.com>
Date:   Sun Aug 17 20:23:11 2025 -0700

    Implements driver connection with userspace Zig API

diff --git a/drivers/gpu/drm/antithesis/Makefile b/drivers/gpu/drm/antithesis/Makefile
index 393834920..737cc06d4 100644
--- a/drivers/gpu/drm/antithesis/Makefile
+++ b/drivers/gpu/drm/antithesis/Makefile
@@ -3,6 +3,6 @@
 # Makefile for the drm device driver.  This driver provides support for the
 # Direct Rendering Infrastructure (DRI) in XFree86 4.1.0 and higher.
 
-antithesis-gpu-y := antithesis_command.o antithesis_alloc.o antithesis_pipeline.o antithesis.o
+antithesis-gpu-y := antithesis_pci.o antithesis_alloc.o antithesis_command.o antithesis_pipeline.o antithesis.o
 
-obj-$(CONFIG_DRM_ANTITHESIS_GPU) += antithesis.o antithesis_command.o antithesis_alloc.o antithesis_pipeline.o
+obj-$(CONFIG_DRM_ANTITHESIS_GPU) += antithesis.o antithesis_pci.o antithesis_alloc.o antithesis_command.o antithesis_pipeline.o
diff --git a/drivers/gpu/drm/antithesis/antithesis.c b/drivers/gpu/drm/antithesis/antithesis.c
index a6bb235ca..3eea28255 100644
--- a/drivers/gpu/drm/antithesis/antithesis.c
+++ b/drivers/gpu/drm/antithesis/antithesis.c
@@ -1,22 +1,6 @@
 #include <linux/module.h>
 #include <linux/pci.h>
-
-#include <drm/drm_drv.h>
-#include <drm/drm.h>
-#include <drm/drm_drv.h>
-#include <drm/drm_file.h>
-#include <drm/drm_ioctl.h>
-#include <drm/drm_atomic_state_helper.h>
-#include <drm/drm_probe_helper.h>
-#include <drm/drm_modeset_helper_vtables.h>
-#include <drm/drm_edid.h>
-#include <drm/drm_gem_shmem_helper.h>
-#include <drm/drm_modeset_helper.h>
-#include <drm/drm_framebuffer.h>
-#include <drm/drm_damage_helper.h>
-#include <drm/drm_gem_framebuffer_helper.h>
-#include <drm/drm_simple_kms_helper.h>
-#include <drm/drm_managed.h>
+#include <linux/cdev.h>
 
 #include "antithesis_command.h"
 #include "antithesis_alloc.h"
@@ -25,10 +9,16 @@
 #define DRV_NAME "antithesis"
 #define PCI_VENDOR_ID_ANTITHESIS 0xeeee
 #define PCI_DEVICE_ID_ANTITHESIS 0xeeee
-#define ANTITHESIS_BYTES_PER_PIX 4
 
 #define MINIMAL
 
+struct antithesis_chardev {
+	struct cdev cdev;
+	dev_t devno;
+};
+
+struct antithesis_chardev chardev;
+
 struct antithesis_state {
 	struct antithesis_alloc_dev *alloc_dev;
 	struct antithesis_alloc_obj *obj;
@@ -50,155 +40,44 @@ static const struct pci_device_id pci_table[] = {
 	{}
 };
 
-static int antithesis_pci_init(struct pci_dev *pdev,
-			       struct antithesis_state *state)
-{
-	int ret = 0;
-
-	// Enable the PCI device
-	ret = pci_enable_device(pdev);
-	if (ret) {
-		return ret;
-	}
-
-	// Take control of the device
-	ret = pci_request_regions(pdev, DRV_NAME);
-	if (ret) {
-		pci_disable_device(pdev);
-		return ret;
-	}
-
-	state->alloc_dev = antithesis_alloc_dev_alloc(pdev);
+struct antithesis_state state;
 
-	return 0;
-}
-
-static void antithesis_pci_deinit(struct pci_dev *pdev)
-{
-	// Disable the PCI device
-	pci_disable_device(pdev);
-}
-
-#ifdef DRM
-static int antithesis_dumb_create(struct drm_file *file_priv,
-				  struct drm_device *dev,
-				  struct drm_mode_create_dumb *args)
+static ssize_t antithesis_write(struct file *filp, const char __user *buf, size_t len, loff_t *off)
 {
-	args->pitch = args->width * ANTITHESIS_BYTES_PER_PIX;
-	args->size = args->pitch * args->height;
-	struct antithesis_state *state = dev->dev_private;
-	struct antithesis_alloc_agg *agg =
-		antithesis_alloc_agg_alloc(state->alloc_dev, args->size);
-	if (IS_ERR(agg)) {
-		return PTR_ERR(agg);
+	char *kbuf = kmalloc(len, GFP_KERNEL);
+	if(copy_from_user(kbuf, buf, len)) {
+		return 0;
 	}
-	args->handle =
-		0; // Essentially ID. We are only using one agg (for now), so can just be set to 0.
-	state->agg = agg;
-
-	return 0;
-}
-
-static const struct file_operations antithesis_fops = {
-	.open = drm_open,
-	.release = drm_release,
-	.unlocked_ioctl = drm_ioctl,
-	.compat_ioctl = drm_compat_ioctl,
-	.poll = drm_poll,
-	.read = drm_read,
-	.llseek = noop_llseek,
-	.mmap = antithesis_alloc_mmap
-};
-
-static const struct drm_driver driver = {
-	.driver_features = 0,
-	.name = "antithesis",
-	.dumb_create = antithesis_dumb_create,
-	.fops = &antithesis_fops,
-};
-
-static void antithesis_plane_update(struct drm_plane *plane,
-				    struct drm_atomic_state *drm_state)
-{
-	struct antithesis_state *state = plane->dev->dev_private;
-	antithesis_pipeline_func(state->pipeline_in);
-}
-
-static struct drm_device *antithesis_drm_init(struct pci_dev *pdev,
-					      struct antithesis_state *state)
-{
-	// Allocate device
-	struct drm_device *drm_dev = drm_dev_alloc(&driver, &pdev->dev);
-
-	// Load state onto DRM device
-	drm_dev->dev_private = state;
-
-	// Register the device
-	int rc = drm_dev_register(drm_dev, 0);
-	if (rc > 0) {
-		goto err;
+	struct antithesis_alloc_obj *obj = antithesis_alloc_obj_alloc(state.alloc_dev, len);
+	antithesis_alloc_obj_write(state.alloc_dev, obj, kbuf);
+	char *res = antithesis_alloc_obj_read(state.alloc_dev, obj);
+	antithesis_command_process(antithesis_command_queue_pop(state.alloc_dev->queue), state.alloc_dev->pdev);
+	antithesis_command_process(antithesis_command_queue_pop(state.alloc_dev->queue), state.alloc_dev->pdev);
+	for (unsigned int i = 0; i < obj->size; i++) {
+		printk(KERN_INFO "Char %u: %c", i, res[i]);
 	}
-	return drm_dev;
-err:
-	drm_dev_put(drm_dev);
-	return ERR_PTR(rc);
+	return len;
 }
 
-#endif
+static struct file_operations fops = {
+	.owner = THIS_MODULE,
+	.write = antithesis_write,
+};
 
 static int antithesis_probe(struct pci_dev *pdev,
 			    const struct pci_device_id *ent)
 {
 	int ret = 0;
 
-	// Allocate space for state
-	struct antithesis_state *state =
-		kzalloc(sizeof(struct antithesis_state), GFP_KERNEL);
-
-	ret = antithesis_pci_init(pdev, state);
-
-	struct antithesis_alloc_obj *obj = antithesis_alloc_obj_alloc(state->alloc_dev, 5);
-	char *msg = kmalloc(sizeof(*msg) * 5, GFP_KERNEL);
-	msg[0] = 'H';
-	msg[1] = 'e';
-	msg[2] = 'l';
-	msg[3] = 'l';
-	msg[4] = 'o';
-	antithesis_alloc_obj_write(state->alloc_dev, obj, msg);
-	char *res = antithesis_alloc_obj_read(state->alloc_dev, obj);
-	antithesis_command_process(antithesis_command_queue_pop(state->alloc_dev->queue), state->alloc_dev->pdev);
-	antithesis_command_process(antithesis_command_queue_pop(state->alloc_dev->queue), state->alloc_dev->pdev);
-	for (unsigned int i = 0; i < obj->size; i++) {
-		printk(KERN_INFO "Char %ui: %c", i, res[i]);
-	}
+	struct antithesis_pci_dev *apdev = antithesis_pci_init(pdev);
+	state.alloc_dev = antithesis_alloc_dev_alloc(apdev);
 
-	printk(KERN_NOTICE "Antithesis init success!");
-
-#ifndef MINIMAL
-
-#ifdef DRM
-
-	struct drm_device *drm_dev = antithesis_drm_init(pdev, state);
-	if (IS_ERR(drm_dev)) {
-		ret = PTR_ERR(drm_dev);
-		antithesis_pci_deinit(pdev);
-	}
+	alloc_chrdev_region(&chardev.devno, 0, 1, DRV_NAME);
+	printk(KERN_INFO "Major, Minor: %d, %d", MAJOR(chardev.devno), MINOR(chardev.devno));
+	cdev_init(&chardev.cdev, &fops);
+	cdev_add(&chardev.cdev, chardev.devno, 1);
 
-#else
-
-	extern unsigned int *mmap_mem;
-	extern unsigned int mmap_size;
-	mmap_mem = kmalloc(sizeof(*mmap_mem), GFP_KERNEL);
-	mmap_size = 1;
-	mmap_mem[0] = 0xdeadbeef;
-
-#endif
-
-	state->pipeline_in = kmalloc(sizeof(*state->pipeline_in), GFP_KERNEL);
-	state->pipeline_in->agg = state->agg;
-	state->pipeline_in->dev = state->alloc_dev;
-
-#endif
+	printk(KERN_NOTICE "Antithesis init success!");
 
 	return ret;
 }
@@ -207,8 +86,10 @@ static void antithesis_remove(struct pci_dev *pdev)
 {
 	struct antithesis_state *state = pci_get_drvdata(pdev);
 
+	antithesis_pci_deinit(state->alloc_dev->pdev);
 	antithesis_state_free(state);
-	antithesis_pci_deinit(pdev);
+	cdev_del(&chardev.cdev);
+	unregister_chrdev_region(chardev.devno, 1);
 }
 
 static struct pci_driver antithesis_driver = {
diff --git a/drivers/gpu/drm/antithesis/antithesis_alloc.c b/drivers/gpu/drm/antithesis/antithesis_alloc.c
index 59b369815..a994fead2 100644
--- a/drivers/gpu/drm/antithesis/antithesis_alloc.c
+++ b/drivers/gpu/drm/antithesis/antithesis_alloc.c
@@ -4,14 +4,11 @@
 
 #define ANTITHESIS_QUEUE_SIZE 5
 
-struct antithesis_alloc_dev *antithesis_alloc_dev_alloc(struct pci_dev *pdev)
+struct antithesis_alloc_dev *antithesis_alloc_dev_alloc(struct antithesis_pci_dev *pdev)
 {
 	struct antithesis_alloc_dev *adev = kzalloc(sizeof(*adev), GFP_KERNEL);
 
-	void __iomem *pcimem = pci_iomap(pdev, 0, 0);
-	struct antithesis_pci_dev *apdev = kzalloc(sizeof(*apdev), GFP_KERNEL);
-	apdev->pcimem = pcimem;
-	adev->pdev = apdev;
+	adev->pdev = pdev;
 	struct antithesis_command_queue *queue = kzalloc(sizeof(*queue), GFP_KERNEL);
 	queue->command_count = ANTITHESIS_QUEUE_SIZE;
 	queue->commands = kzalloc(sizeof(*queue->commands) * queue->command_count, GFP_KERNEL);
@@ -85,19 +82,3 @@ void antithesis_alloc_obj_free(struct antithesis_alloc_dev *adev,
 {
 	adev->objs[obj->addr].alloced = false;
 }
-
-unsigned long mmap_mem_size = 0;
-unsigned int *mmap_mem = NULL;
-
-int antithesis_alloc_mmap(struct file *filp, struct vm_area_struct *vma)
-{
-	unsigned long len = vma->vm_end - vma->vm_start;
-	mmap_mem = kmalloc(len, GFP_KERNEL);
-	mmap_mem_size = len;
-	for (unsigned long i = (unsigned long)mmap_mem;
-	     i < (unsigned long)mmap_mem + mmap_mem_size; i += PAGE_SIZE) {
-		SetPageReserved(virt_to_page(i));
-	}
-	unsigned long pfn = virt_to_phys((void *)mmap_mem) >> PAGE_SHIFT;
-	return remap_pfn_range(vma, vma->vm_start, pfn, len, vma->vm_page_prot);
-}
diff --git a/drivers/gpu/drm/antithesis/antithesis_alloc.h b/drivers/gpu/drm/antithesis/antithesis_alloc.h
index d0c9e16ca..66ca99bff 100644
--- a/drivers/gpu/drm/antithesis/antithesis_alloc.h
+++ b/drivers/gpu/drm/antithesis/antithesis_alloc.h
@@ -18,7 +18,7 @@ struct antithesis_alloc_obj {
 	unsigned int size;
 };
 
-struct antithesis_alloc_dev *antithesis_alloc_dev_alloc(struct pci_dev *pdev);
+struct antithesis_alloc_dev *antithesis_alloc_dev_alloc(struct antithesis_pci_dev *pdev);
 void antithesis_alloc_dev_free(struct antithesis_alloc_dev *adev);
 
 struct antithesis_alloc_obj *
diff --git a/drivers/gpu/drm/antithesis/antithesis_mmap.c b/drivers/gpu/drm/antithesis/antithesis_mmap.c
new file mode 100644
index 000000000..a575184d4
--- /dev/null
+++ b/drivers/gpu/drm/antithesis/antithesis_mmap.c
@@ -0,0 +1,18 @@
+#include <linux/pci.h>
+#include "antithesis_mmap.h"
+
+unsigned long mmap_mem_size = 0;
+unsigned int *mmap_mem = NULL;
+
+int antithesis_mmap(struct file *filp, struct vm_area_struct *vma)
+{
+	unsigned long len = vma->vm_end - vma->vm_start;
+	mmap_mem = kmalloc(len, GFP_KERNEL);
+	mmap_mem_size = len;
+	for (unsigned long i = (unsigned long)mmap_mem;
+	     i < (unsigned long)mmap_mem + mmap_mem_size; i += PAGE_SIZE) {
+		SetPageReserved(virt_to_page(i));
+	}
+	unsigned long pfn = virt_to_phys((void *)mmap_mem) >> PAGE_SHIFT;
+	return remap_pfn_range(vma, vma->vm_start, pfn, len, vma->vm_page_prot);
+}
diff --git a/drivers/gpu/drm/antithesis/antithesis_mmap.h b/drivers/gpu/drm/antithesis/antithesis_mmap.h
new file mode 100644
index 000000000..3540a1950
--- /dev/null
+++ b/drivers/gpu/drm/antithesis/antithesis_mmap.h
@@ -0,0 +1,3 @@
+#include <linux/vmalloc.h>
+
+int antithesis_mmap(struct file *filp, struct vm_area_struct *vma);
diff --git a/drivers/gpu/drm/antithesis/antithesis_pci.c b/drivers/gpu/drm/antithesis/antithesis_pci.c
new file mode 100644
index 000000000..afbd999b7
--- /dev/null
+++ b/drivers/gpu/drm/antithesis/antithesis_pci.c
@@ -0,0 +1,35 @@
+#include "antithesis_pci.h"
+
+#define DRV_NAME "antithesis"
+
+struct antithesis_pci_dev *antithesis_pci_init(struct pci_dev *pdev)
+{
+	int ret = 0;
+
+	// Enable the PCI device
+	ret = pci_enable_device(pdev);
+	if (ret) {
+		return ERR_PTR(ret);
+	}
+
+	// Take control of the device
+	ret = pci_request_regions(pdev, DRV_NAME);
+	if (ret) {
+		pci_disable_device(pdev);
+		return ERR_PTR(ret);
+	}
+
+	void __iomem *pcimem = pci_iomap(pdev, 0, 0);
+	struct antithesis_pci_dev *apdev = kmalloc(sizeof(*apdev), GFP_KERNEL);
+	apdev->pcimem = pcimem;
+	apdev->dev = pdev;
+
+	return apdev;
+}
+
+void antithesis_pci_deinit(struct antithesis_pci_dev *pdev)
+{
+	pci_disable_device(pdev->dev);
+	kfree(pdev->dev);
+	kfree(pdev);
+}
diff --git a/drivers/gpu/drm/antithesis/antithesis_pci.h b/drivers/gpu/drm/antithesis/antithesis_pci.h
index 1463fe286..917ca0d5e 100644
--- a/drivers/gpu/drm/antithesis/antithesis_pci.h
+++ b/drivers/gpu/drm/antithesis/antithesis_pci.h
@@ -8,4 +8,8 @@
 
 struct antithesis_pci_dev {
 	void __iomem *pcimem;
+	struct pci_dev *dev;
 };
+
+struct antithesis_pci_dev *antithesis_pci_init(struct pci_dev *pdev);
+void antithesis_pci_deinit(struct antithesis_pci_dev *pdev);
diff --git a/drivers/gpu/drm/antithesis/antithesis_pipeline.c b/drivers/gpu/drm/antithesis/antithesis_pipeline.c
index 54aa5d4a0..d9ee783d7 100644
--- a/drivers/gpu/drm/antithesis/antithesis_pipeline.c
+++ b/drivers/gpu/drm/antithesis/antithesis_pipeline.c
@@ -1,4 +1,7 @@
 #include <linux/module.h>
+
+#ifdef PIPELINE
+
 #include "antithesis_pipeline.h"
 #include "antithesis_alloc.h"
 
@@ -24,3 +27,5 @@ antithesis_pipeline_stage_final
 }
 
 antithesis_pipeline(intermediate)
+
+#endif
